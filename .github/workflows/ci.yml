name: AWS Kommandos CI

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
on:
  push:
    branches:
      - master
      - develop

jobs:
  publish-test-pypi:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install PyPA/Build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
  publish-pypi:
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/master'
      steps:
        - uses: actions/checkout@master
        - name: Set up Python 3.9
          uses: actions/setup-python@v1
          with:
            python-version: 3.9
        - name: Install PyPA/Build
          run: >-
            python -m
            pip install
            build
            --user
        - name: Build a binary wheel and a source tarball
          run: >-
            python -m
            build
            --sdist
            --wheel
            --outdir dist/
        - name: Increate Version
          run: >-
            #get highest tag number, and add 1.0.0 if doesn't exist
            CURRENT_VERSION="$(git describe --abbrev=0 --tags 2>/dev/null)"

            if [[ $CURRENT_VERSION == '' ]]
            then
            CURRENT_VERSION='1.0.0'
            fi
            echo "Current Version: $CURRENT_VERSION"

            #replace . with space so can split into an array
            CURRENT_VERSION_PARTS=(${CURRENT_VERSION//./ })

            #get number parts
            VNUM1=${CURRENT_VERSION_PARTS[0]}
            VNUM2=${CURRENT_VERSION_PARTS[1]}
            VNUM3=${CURRENT_VERSION_PARTS[2]}

            #create new tag 
            VNUM3_INCR=$((VNUM3+1))
            NEW_TAG="$VNUM1.$VNUM2.$VNUM3_INCR"
            echo "Updating $CURRENT_VERSION to $NEW_TAG"

            #get current hash and see if it already has a tag
            GIT_COMMIT=`git rev-parse HEAD`
            NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`

            #only tag if no tag already
            #to publish, need to be logged in to npm, and with clean working directory: `npm login; git stash`
            if [ -z "$NEEDS_TAG" ]; then
              git tag "$NEW_TAG"
              echo "Tagged with $NEW_TAG"
              git push origin --tags || exit 1
            else
              echo "Already a tag on this commit"
            fi

            exit 0
        - name: Publish distribution to Test PyPI
          uses: pypa/gh-action-pypi-publish@master
          with:
            password: ${{ secrets.PYPI_TEST_API_TOKEN }}
            repository_url: https://test.pypi.org/legacy/
